#include"starterData.h"

int chooseAccountType();
void adminMenu();
void newBus(std::vector<bus>& myBuses, std::vector<driver>& myDrivers, std::vector<route>& myRoutes, std::vector<location>& myLocations);
void listBuses(std::vector<bus> myBuses, std::vector<driver> myDrivers, std::vector<route> myRoutes, std::vector<location> mylocations);
std::vector<bus> search(int BusID, std::vector<bus> myBuses);
std::vector<bus> search(std::string BusName, std::vector<bus> myBuses);
std::vector<bus> search(route r, std::vector<bus> myBuses);
std::vector<bus> search(driver d, std::vector<bus> myBuses);
void searchBus(std::vector<bus>& myBuses, std::vector<driver>& myDrivers, std::vector<route>& myRoutes, std::vector<location>& myLocations);
void updateBus(std::vector<bus>& myBuses, std::vector<driver>& myDrivers, std::vector<route>& myRoutes, std::vector<location>& myLocations);
void deleteBus(std::vector<bus>& myBuses, std::vector<driver>& myDrivers, std::vector<route>& myRoutes);
void AddLocation(std::vector<location>& myLocations);
void ListLocations(std::vector<location> myLocations);
std::vector<location> search(int locationID, std::vector<location> myLocations);
std::vector<location> search(std::string locationName, std::vector<location> myLocations);
void SearchLocation(std::vector<location> myLocations);
void UpdateLocation(std::vector<location>& myLocations);
void RemoveLocation(std::vector<location>& myLocations, std::vector<route>& myRoutes, std::vector<bus>& myBuses);
void managelocations(std::vector<location>& myLocations, std::vector<route>& myRoutes, std::vector<bus>& myBuses);
void AddRoute(std::vector<route>& myRoutes, std::vector<location>& myLocations);
void ListRoutes(std::vector<route> myRoutes, std::vector<location> myLocations);
std::vector<route> search(int routeId, std::vector<route> myRoutes);
std::vector<route> search(location deptLocataion, std::vector<route> myRoutes);
std::vector<route> search(location destLocation, std::vector<route> myRoutes, int a);
std::vector<route> search(route compare_route, std::vector<route> myRoutes);
void SearchRoute(std::vector<bus> myBuses, std::vector<route> myRoutes, std::vector<location> myLocations);
void UpdateRoute(std::vector<route>& myRoutes, std::vector<location>& mylocations);
void RemoveRoute(std::vector<route>& myRoutes, std::vector<location>& myLocations, std::vector<bus>& myBuses);
void manageRoutes(std::vector<route>& myRoutes, std::vector<location>& mylocations, std::vector<bus>& myBuses);
void hireDriver(std::vector<driver>& myDrivers);
void listDrivers(std::vector<driver> myDrivers);
std::vector<driver> search(int driverID, std::vector<driver> myDrivers);
std::vector<driver> search(std::string driverName, std::vector<driver> myDrivers);
std::vector<driver> search(int CNIC, std::vector<driver> myDrivers, int a);
void searchDriver(std::vector<driver> myDrivers);
void updateDriver(std::vector<driver>& myDrivers);
void fireDriver(std::vector<driver>& myDrivers, std::vector<bus>& mybuses);
void manageDrivers(std::vector<driver>& myDrivers, std::vector<bus>& myBuses);
void generalMenu();
int temp2Original_bus(std::vector<bus> MyBuses, int ID);
void bookSeat(std::vector<bus>& myBuses, std::vector<route>myRoutes, std::vector<location>myLocations, std::vector<ticket>& myTickets);
int search(std::vector<ticket> myTickets, int ID);
void seeBookingDetails(std::vector<bus> buses, std::vector<route> routes, std::vector<location> Locations, std::vector<ticket> myTickets);
void removeBooking(std::vector<bus>& buses, std::vector<route> routes, std::vector<location> Locations, std::vector<ticket>& myTickets);